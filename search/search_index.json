{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MacNotesApp","text":"<p>Work with Apple MacOS Notes.app from the command line. Also includes python interface for scripting Notes.app from your own python code. Interactive browsing of notes in a TUI (Terminal User Interface? Textual User Interface?) coming soon!</p> <p>For full documentation visit macnotesapp.</p>"},{"location":"#installation","title":"Installation","text":"<p>If you just want to use the command line tool, the easiest option is to install via pipx.</p> <p>If you use <code>pipx</code>, you will not need to create a python virtual environment as <code>pipx</code> takes care of this. The easiest way to do this on a Mac is to use homebrew:</p> <ul> <li>Open <code>Terminal</code> (search for <code>Terminal</code> in Spotlight or look in <code>Applications/Utilities</code>)</li> <li>Install <code>homebrew</code> according to instructions at https://brew.sh/</li> <li>Type the following into Terminal: <code>brew install pipx</code></li> <li>Then type this: <code>pipx install macnotesapp</code></li> <li><code>pipx</code> will install the <code>macnotesapp</code> command line interface (CLI) as an executable named <code>notes</code></li> <li>Now you should be able to run <code>notes</code> by typing: <code>notes</code></li> </ul> <p>Once you've installed macnotesapp with pipx, to upgrade to the latest version:</p> <pre><code>pipx upgrade macnotesapp\n</code></pre> <p>Note: Currently tested on macOS 13.7.1/Ventura.</p>"},{"location":"cli/","title":"Command Line Reference","text":""},{"location":"cli/#notes","title":"notes","text":"<p>notes: work with Apple Notes on the command line.</p> <p>Usage:</p> <pre><code>notes [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -v, --version  Show the version and exit.\n  --help         Show this message and exit.\n</code></pre>"},{"location":"cli/#accounts","title":"accounts","text":"<p>Print information about Notes accounts.</p> <p>Usage:</p> <pre><code>notes accounts [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -j, --json  Print output in JSON format.\n  --help      Show this message and exit.\n</code></pre>"},{"location":"cli/#add","title":"add","text":"<p>Add new note.</p> <p>There are multiple ways to add a new note:</p> <p>Add a new note from standard input (STDIN):</p> <p>notes add</p> <p>cat file.txt | notes add</p> <p>notes add &lt; file.txt</p> <p>Add a new note by passing string on command line:</p> <p>notes add NOTE</p> <p>Add a new note by opening default editor (defined in $EDITOR or via <code>notes config</code>):</p> <p>notes add --edit</p> <p>notes add -e</p> <p>Add a new note from URL (downloads URL, creates a cleaned readable version to store in new Note):</p> <p>notes add --url URL</p> <p>notes add -u URL</p> <p>If NOTE is a single line, adds new note with name NOTE and no body. If NOTE is more than one line, adds new note where name is first line of NOTE and body is remainder.</p> <p>Body of note must be plain text unless --html/-h or --markdown/-m flag is set in which case body should be HTML or Markdown, respectively. If --edit/-e flag is set, note will be opened in default editor before being added. If --show/-s flag is set, note will be shown in Notes.app after being added.</p> <p>Account and top level folder may be specified with --account/-a and --folder/-f, respectively. If not provided, default account and folder are used.</p> <p>Usage:</p> <pre><code>notes add [OPTIONS] NOTE\n</code></pre> <p>Options:</p> <pre><code>  -s, --show             Show note in Notes after adding.\n  -F, --file FILENAME\n  -u, --url URL\n  -h, --html             Use HTML for body of note.\n  -m, --markdown         Use Markdown for body of note.\n  -p, --plaintext        Use plaintext for body of note (default unless\n                         changed in `notes config`).\n  -e, --edit             Edit note text before adding in default editor.\n  -a, --account ACCOUNT  Add note to account ACCOUNT.\n  -f, --folder FOLDER    Add note to folder FOLDER.\n  --help                 Show this message and exit.\n</code></pre>"},{"location":"cli/#cat","title":"cat","text":"<p>Print one or more notes to STDOUT</p> <p>Usage:</p> <pre><code>notes cat [OPTIONS] NOTE_NAME\n</code></pre> <p>Options:</p> <pre><code>  -p, --plaintext  Output note as plain text.\n  -m, --markdown   Output note as Markdown.\n  -h, --html       Output note as HTML.\n  -j, --json       Output note as JSON. The default format for the note body\n                   in JSON is HTML (this is how the note is stored in Notes).\n                   If --plaintext or --markdown is also specified, the note\n                   body in the resulting JSON will be in the specified format.\n  --help           Show this message and exit.\n</code></pre>"},{"location":"cli/#config","title":"config","text":"<p>Configure default settings for account, editor, etc.</p> <p>Usage:</p> <pre><code>notes config [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"cli/#dump","title":"dump","text":"<p>Dump all notes or selection of notes for debugging</p> <p>Usage:</p> <pre><code>notes dump [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -s, --selected  Dump only selected notes.\n  -B, --no-body   Do not dump note body.\n  --help          Show this message and exit.\n</code></pre>"},{"location":"cli/#help","title":"help","text":"<p>Print help; for help on commands: help . <p>Usage:</p> <pre><code>notes help [OPTIONS] [TOPIC] [SUBTOPIC]\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"cli/#list","title":"list","text":"<p>List notes, optionally filtering by account or text.</p> <p>Usage:</p> <pre><code>notes list [OPTIONS] TEXT\n</code></pre> <p>Options:</p> <pre><code>  -a, --account ACCOUNT  Limit results to account ACCOUNT; may be repeated to\n                         include multiple accounts.\n  --help                 Show this message and exit.\n</code></pre>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#notesapp","title":"NotesApp","text":"<p>Represents Notes.app instance</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>class NotesApp:\n    \"\"\"Represents Notes.app instance\"\"\"\n\n    def __init__(self):\n        \"\"\"create new NotesApp object\"\"\"\n        self._app = ScriptingBridge.SBApplication.applicationWithBundleIdentifier_(\n            \"com.apple.Notes\"\n        )\n\n    @property\n    def app(self):\n        \"\"\"Return Notes.app SBApplication object\"\"\"\n        return self._app\n\n    @property\n    def accounts(self) -&gt; list[str]:\n        \"\"\"Return list of accounts\"\"\"\n        return [str(a.name()) for a in self._app.accounts()]\n\n    @property\n    def default_account(self) -&gt; str:\n        \"\"\"Return name of default account\"\"\"\n        return str(self._app.defaultAccount().name())\n\n    def notes(\n        self,\n        name: list[str] | None = None,\n        body: list[str] | None = None,\n        text: list[str] | None = None,\n        password_protected: bool | None = None,\n        id: list[str] | None = None,\n        accounts: list[str] | None = None,\n    ) -&gt; list[\"Note\"]:\n        \"\"\"Return Note object for all notes contained in Notes.app or notes filtered by property.\n\n        Args:\n            name: list of note names to filter by\n            body: list of note bodies to filter by\n            text: list of note text to filter by\n            password_protected: filter by password protected notes\n            id: list of note ids to filter by\n            accounts: list of account names to filter by\n\n        Returns:\n            list of Note objects\n        \"\"\"\n        # TODO: should this be a generator?\n        account_list = self.app.accounts()\n        if accounts:\n            format_str = \"name == %@\" + \" OR name == %@ \" * (len(accounts) - 1)\n            predicate = AppKit.NSPredicate.predicateWithFormat_(format_str, accounts)\n            account_list = account_list.filteredArrayUsingPredicate_(predicate)\n        notes = []\n        for account in account_list:\n            notes.extend(\n                Account(account).notes(name, body, text, password_protected, id)\n            )\n        return notes\n\n    def noteslist(\n        self,\n        name: list[str] | None = None,\n        body: list[str] | None = None,\n        text: list[str] | None = None,\n        password_protected: bool | None = None,\n        id: list[str] | None = None,\n        accounts: list[str] | None = None,\n    ) -&gt; \"NotesList\":\n        \"\"\"Return NoteList object for all notes contained in account or notes filtered by property.\n\n        Args:\n            name: list of note names to filter by\n            body: list of note bodies to filter by\n            text: list of note text to filter by\n            password_protected: filter by password protected notes\n            id: list of note ids to filter by\n            accounts: list of account names to filter by\n\n        Returns:\n            NotesList object\n        \"\"\"\n        account_list = self.app.accounts()\n        if accounts:\n            format_str = \"name == %@\" + \" OR name == %@ \" * (len(accounts) - 1)\n            predicate = AppKit.NSPredicate.predicateWithFormat_(format_str, accounts)\n            account_list = account_list.filteredArrayUsingPredicate_(predicate)\n        noteslists = [\n            Account(account)._noteslist(\n                name=name,\n                body=body,\n                text=text,\n                password_protected=password_protected,\n                id=id,\n            )\n            for account in account_list\n        ]\n        return NotesList(*noteslists)\n\n    @property\n    def selection(self) -&gt; list[\"Note\"]:\n        \"\"\"Return lit of Note objects for selected notes\"\"\"\n        notes = self.app.selection()\n        return [Note(note) for note in notes]\n\n    @property\n    def version(self) -&gt; str:\n        \"\"\"Return version of Notes.app\"\"\"\n        return str(self.app.version())\n\n    def make_note(\n        self, name: str, body: str, attachments: list[str] | None = None\n    ) -&gt; \"Note\":\n        \"\"\"Create new note in default folder of default account.\n\n        Args:\n            name: name of notes\n            body: body of note as HTML text\n            attachments: optional list of paths to attachments to add to note\n\n        Returns:\n            newly created Note object\n        \"\"\"\n        # reference: https://developer.apple.com/documentation/scriptingbridge/sbobject/1423973-initwithproperties\n        account = Account(self.app.defaultAccount())\n        note = account.make_note(name, body)\n        if attachments:\n            for attachment in attachments:\n                note.add_attachment(attachment)\n        return note\n\n    def account(self, account: Optional[str] = None) -&gt; \"Account\":\n        \"\"\"Return Account object for account or default account if account is None.\n\n        Arg:\n            account: name of account to return. If None, return default account.\n\n        Returns:\n            Account object\n        \"\"\"\n        account = account or self.default_account\n        predicate = AppKit.NSPredicate.predicateWithFormat_(\"name == %@\", account)\n        accounts = self.app.accounts().filteredArrayUsingPredicate_(predicate)\n        if not accounts:\n            raise ValueError(f\"Could not find account {account}\")\n        account_obj = accounts[0]\n        return Account(account_obj)\n\n    def activate(self) -&gt; None:\n        \"\"\"Activate Notes.app\"\"\"\n        run_script(\"notesActivate\")\n\n    def quit(self) -&gt; None:\n        \"\"\"Quit Notes.app\"\"\"\n        run_script(\"notesQuit\")\n\n    def __len__(self) -&gt; int:\n        \"\"\"Return count of notes in Notes.app\"\"\"\n        return sum(len(account.notes()) for account in self.app.accounts())\n\n    def __iter__(self) -&gt; Generator[\"Note\", None, None]:\n        \"\"\"Generator to yield Note object for all notes contained in Notes.app\"\"\"\n        for account in self.app.accounts():\n            notes = account.notes()\n            for note in notes:\n                yield Note(note)\n</code></pre>"},{"location":"reference/#macnotesapp.notesapp.NotesApp.accounts","title":"<code>accounts: list[str]</code>  <code>property</code>","text":"<p>Return list of accounts</p>"},{"location":"reference/#macnotesapp.notesapp.NotesApp.app","title":"<code>app</code>  <code>property</code>","text":"<p>Return Notes.app SBApplication object</p>"},{"location":"reference/#macnotesapp.notesapp.NotesApp.default_account","title":"<code>default_account: str</code>  <code>property</code>","text":"<p>Return name of default account</p>"},{"location":"reference/#macnotesapp.notesapp.NotesApp.selection","title":"<code>selection: list['Note']</code>  <code>property</code>","text":"<p>Return lit of Note objects for selected notes</p>"},{"location":"reference/#macnotesapp.notesapp.NotesApp.version","title":"<code>version: str</code>  <code>property</code>","text":"<p>Return version of Notes.app</p>"},{"location":"reference/#macnotesapp.notesapp.NotesApp.__init__","title":"<code>__init__()</code>","text":"<p>create new NotesApp object</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>def __init__(self):\n    \"\"\"create new NotesApp object\"\"\"\n    self._app = ScriptingBridge.SBApplication.applicationWithBundleIdentifier_(\n        \"com.apple.Notes\"\n    )\n</code></pre>"},{"location":"reference/#macnotesapp.notesapp.NotesApp.__iter__","title":"<code>__iter__()</code>","text":"<p>Generator to yield Note object for all notes contained in Notes.app</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>def __iter__(self) -&gt; Generator[\"Note\", None, None]:\n    \"\"\"Generator to yield Note object for all notes contained in Notes.app\"\"\"\n    for account in self.app.accounts():\n        notes = account.notes()\n        for note in notes:\n            yield Note(note)\n</code></pre>"},{"location":"reference/#macnotesapp.notesapp.NotesApp.__len__","title":"<code>__len__()</code>","text":"<p>Return count of notes in Notes.app</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>def __len__(self) -&gt; int:\n    \"\"\"Return count of notes in Notes.app\"\"\"\n    return sum(len(account.notes()) for account in self.app.accounts())\n</code></pre>"},{"location":"reference/#macnotesapp.notesapp.NotesApp.account","title":"<code>account(account=None)</code>","text":"<p>Return Account object for account or default account if account is None.</p> Arg <p>account: name of account to return. If None, return default account.</p> <p>Returns:</p> Type Description <code>'Account'</code> <p>Account object</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>def account(self, account: Optional[str] = None) -&gt; \"Account\":\n    \"\"\"Return Account object for account or default account if account is None.\n\n    Arg:\n        account: name of account to return. If None, return default account.\n\n    Returns:\n        Account object\n    \"\"\"\n    account = account or self.default_account\n    predicate = AppKit.NSPredicate.predicateWithFormat_(\"name == %@\", account)\n    accounts = self.app.accounts().filteredArrayUsingPredicate_(predicate)\n    if not accounts:\n        raise ValueError(f\"Could not find account {account}\")\n    account_obj = accounts[0]\n    return Account(account_obj)\n</code></pre>"},{"location":"reference/#macnotesapp.notesapp.NotesApp.activate","title":"<code>activate()</code>","text":"<p>Activate Notes.app</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>def activate(self) -&gt; None:\n    \"\"\"Activate Notes.app\"\"\"\n    run_script(\"notesActivate\")\n</code></pre>"},{"location":"reference/#macnotesapp.notesapp.NotesApp.make_note","title":"<code>make_note(name, body, attachments=None)</code>","text":"<p>Create new note in default folder of default account.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of notes</p> required <code>body</code> <code>str</code> <p>body of note as HTML text</p> required <code>attachments</code> <code>list[str] | None</code> <p>optional list of paths to attachments to add to note</p> <code>None</code> <p>Returns:</p> Type Description <code>'Note'</code> <p>newly created Note object</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>def make_note(\n    self, name: str, body: str, attachments: list[str] | None = None\n) -&gt; \"Note\":\n    \"\"\"Create new note in default folder of default account.\n\n    Args:\n        name: name of notes\n        body: body of note as HTML text\n        attachments: optional list of paths to attachments to add to note\n\n    Returns:\n        newly created Note object\n    \"\"\"\n    # reference: https://developer.apple.com/documentation/scriptingbridge/sbobject/1423973-initwithproperties\n    account = Account(self.app.defaultAccount())\n    note = account.make_note(name, body)\n    if attachments:\n        for attachment in attachments:\n            note.add_attachment(attachment)\n    return note\n</code></pre>"},{"location":"reference/#macnotesapp.notesapp.NotesApp.notes","title":"<code>notes(name=None, body=None, text=None, password_protected=None, id=None, accounts=None)</code>","text":"<p>Return Note object for all notes contained in Notes.app or notes filtered by property.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>list[str] | None</code> <p>list of note names to filter by</p> <code>None</code> <code>body</code> <code>list[str] | None</code> <p>list of note bodies to filter by</p> <code>None</code> <code>text</code> <code>list[str] | None</code> <p>list of note text to filter by</p> <code>None</code> <code>password_protected</code> <code>bool | None</code> <p>filter by password protected notes</p> <code>None</code> <code>id</code> <code>list[str] | None</code> <p>list of note ids to filter by</p> <code>None</code> <code>accounts</code> <code>list[str] | None</code> <p>list of account names to filter by</p> <code>None</code> <p>Returns:</p> Type Description <code>list['Note']</code> <p>list of Note objects</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>def notes(\n    self,\n    name: list[str] | None = None,\n    body: list[str] | None = None,\n    text: list[str] | None = None,\n    password_protected: bool | None = None,\n    id: list[str] | None = None,\n    accounts: list[str] | None = None,\n) -&gt; list[\"Note\"]:\n    \"\"\"Return Note object for all notes contained in Notes.app or notes filtered by property.\n\n    Args:\n        name: list of note names to filter by\n        body: list of note bodies to filter by\n        text: list of note text to filter by\n        password_protected: filter by password protected notes\n        id: list of note ids to filter by\n        accounts: list of account names to filter by\n\n    Returns:\n        list of Note objects\n    \"\"\"\n    # TODO: should this be a generator?\n    account_list = self.app.accounts()\n    if accounts:\n        format_str = \"name == %@\" + \" OR name == %@ \" * (len(accounts) - 1)\n        predicate = AppKit.NSPredicate.predicateWithFormat_(format_str, accounts)\n        account_list = account_list.filteredArrayUsingPredicate_(predicate)\n    notes = []\n    for account in account_list:\n        notes.extend(\n            Account(account).notes(name, body, text, password_protected, id)\n        )\n    return notes\n</code></pre>"},{"location":"reference/#macnotesapp.notesapp.NotesApp.noteslist","title":"<code>noteslist(name=None, body=None, text=None, password_protected=None, id=None, accounts=None)</code>","text":"<p>Return NoteList object for all notes contained in account or notes filtered by property.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>list[str] | None</code> <p>list of note names to filter by</p> <code>None</code> <code>body</code> <code>list[str] | None</code> <p>list of note bodies to filter by</p> <code>None</code> <code>text</code> <code>list[str] | None</code> <p>list of note text to filter by</p> <code>None</code> <code>password_protected</code> <code>bool | None</code> <p>filter by password protected notes</p> <code>None</code> <code>id</code> <code>list[str] | None</code> <p>list of note ids to filter by</p> <code>None</code> <code>accounts</code> <code>list[str] | None</code> <p>list of account names to filter by</p> <code>None</code> <p>Returns:</p> Type Description <code>'NotesList'</code> <p>NotesList object</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>def noteslist(\n    self,\n    name: list[str] | None = None,\n    body: list[str] | None = None,\n    text: list[str] | None = None,\n    password_protected: bool | None = None,\n    id: list[str] | None = None,\n    accounts: list[str] | None = None,\n) -&gt; \"NotesList\":\n    \"\"\"Return NoteList object for all notes contained in account or notes filtered by property.\n\n    Args:\n        name: list of note names to filter by\n        body: list of note bodies to filter by\n        text: list of note text to filter by\n        password_protected: filter by password protected notes\n        id: list of note ids to filter by\n        accounts: list of account names to filter by\n\n    Returns:\n        NotesList object\n    \"\"\"\n    account_list = self.app.accounts()\n    if accounts:\n        format_str = \"name == %@\" + \" OR name == %@ \" * (len(accounts) - 1)\n        predicate = AppKit.NSPredicate.predicateWithFormat_(format_str, accounts)\n        account_list = account_list.filteredArrayUsingPredicate_(predicate)\n    noteslists = [\n        Account(account)._noteslist(\n            name=name,\n            body=body,\n            text=text,\n            password_protected=password_protected,\n            id=id,\n        )\n        for account in account_list\n    ]\n    return NotesList(*noteslists)\n</code></pre>"},{"location":"reference/#macnotesapp.notesapp.NotesApp.quit","title":"<code>quit()</code>","text":"<p>Quit Notes.app</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>def quit(self) -&gt; None:\n    \"\"\"Quit Notes.app\"\"\"\n    run_script(\"notesQuit\")\n</code></pre>"},{"location":"reference/#account","title":"Account","text":"<p>Notes.app Account object</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>class Account:\n    \"\"\"Notes.app Account object\"\"\"\n\n    def __init__(self, account: ScriptingBridge.SBObject):\n        \"\"\"Initialize Account object\"\"\"\n        self._account = account\n\n    @property\n    def name(self) -&gt; str:\n        \"\"\"Return name of account\"\"\"\n        return str(self._account.name())\n        # return str(self._run_script(\"accountName\"))\n\n    @property\n    def folders(self) -&gt; list[str]:\n        \"\"\"Return list of folder names in account\"\"\"\n        if folders := self._account.folders():\n            return [str(f.name()) for f in folders]\n        return [str(f) for f in self._run_script(\"accountGetFolderNames\")]\n\n    @property\n    def default_folder(self) -&gt; str:\n        \"\"\"Return name of default folder for account\"\"\"\n        if default_folder := self._account.defaultFolder():\n            return str(default_folder.name())\n        return str(self._run_script(\"accountGetDefaultFolder\"))\n\n    @cached_property\n    def id(self) -&gt; str:\n        \"\"\"Return ID of account\"\"\"\n        if id_ := self._account.id():\n            return str(id_)\n        return str(self._run_script(\"accountID\"))\n\n    def notes(\n        self,\n        name: list[str] | None = None,\n        body: list[str] | None = None,\n        text: list[str] | None = None,\n        password_protected: bool | None = None,\n        id: list[str] | None = None,\n    ) -&gt; list[\"Note\"]:\n        \"\"\"Return Note object for all notes contained in account or notes filtered by property.\n\n        Args:\n            name: list of note names to filter by\n            body: list of note bodies to filter by\n            text: list of note text to filter by\n            password_protected: filter by password protected notes\n            id: list of note ids to filter by\n\n        Returns:\n            list of Note objects\n        \"\"\"\n        # TODO: should this be a generator?\n        notes = self._account.notes()\n        format_strings = []\n        if name and notes:\n            name_strings = [\"(name contains[cd] %@)\"] * len(name)\n            format_strings.append(name_strings)\n        if body and notes:\n            body_strings = [\"(plaintext contains[cd] %@)\"] * len(body)\n            format_strings.append(body_strings)\n        if text and notes:\n            text_strings = [\"(name contains[cd] %@)\"] * len(text)\n            text_strings.extend([\"(plaintext contains[cd] %@)\"] * len(text))\n            format_strings.append(text_strings)\n        if password_protected is not None and notes:\n            password_string = (\n                [\"(passwordProtected == TRUE)\"]\n                if password_protected\n                else [\"(passwordProtected == FALSE)\"]\n            )\n            format_strings.append(password_string)\n        if id and notes:\n            id_string = [\"(id == %@)\"] * len(id)\n            format_strings.append(id_string)\n        if format_strings:\n            # have one or more search predicates; filter notes\n            args = name or []\n            args += body or []\n            if text:\n                args += text * 2\n            args += id or []\n            or_strings = [\" OR \".join(strings) for strings in format_strings]\n            format_str = \"(\" + \") AND (\".join(or_strings) + \")\"\n            predicate = AppKit.NSPredicate.predicateWithFormat_(format_str, *args)\n            notes = notes.filteredArrayUsingPredicate_(predicate)\n        return [Note(note) for note in notes.get()]\n\n    def noteslist(\n        self,\n        name: list[str] | None = None,\n        body: list[str] | None = None,\n        text: list[str] | None = None,\n        password_protected: bool | None = None,\n        id: list[str] | None = None,\n    ) -&gt; \"NotesList\":\n        \"\"\"Return NoteList object for all notes contained in account or notes filtered by property.\n\n        Args:\n            name: list of note names to filter by\n            body: list of note bodies to filter by\n            text: list of note text to filter by\n            password_protected: filter by password protected notes\n            id: list of note ids to filter by\n\n        Returns:\n            NotesList object\"\"\"\n        notes = self._noteslist(name, body, text, password_protected, id)\n        return NotesList(notes)\n\n    def folder(self, folder: str) -&gt; \"Folder\":\n        \"\"\"Return Folder object for folder with name folder.\"\"\"\n        folder_obj = self._folder_for_name(folder)\n        return Folder(folder_obj)\n\n    def show(self):\n        \"\"\"Show account in Notes.app UI\"\"\"\n        self._run_script(\"accountShow\")\n\n    def make_note(\n        self,\n        name: str,\n        body: str,\n        folder: str | None = None,\n        attachments: list[str] | None = None,\n    ) -&gt; \"Note\":\n        \"\"\"Create new note in account\n\n        Args:\n            name: name of note\n            body: body of note\n            folder: optional folder to create note in; if None, uses default folder\n            attachments: optional list of file paths to attach to note\n\n        Returns:\n            Note object for new note\n\n        Raises:\n            ScriptingBridgeError: if note could not be created\n            FileNotFoundError: if attachment file could not be found\n        \"\"\"\n\n        # reference: https://developer.apple.com/documentation/scriptingbridge/sbobject/1423973-initwithproperties\n        notes_app = NotesApp()\n        folder_obj = (\n            self._folder_for_name(folder) if folder else self._account.defaultFolder()\n        )\n        properties = {\n            \"body\": f\"&lt;div&gt;&lt;h1&gt;{name}&lt;/h1&gt;&lt;/div&gt;\\n{body}\",\n        }\n        note = (\n            notes_app.app.classForScriptingClass_(\"note\")\n            .alloc()\n            .initWithProperties_(properties)\n        )\n        notes = folder_obj.notes()\n        len_before = len(notes)\n        notes.addObject_(note)\n        len_after = len(notes)\n\n        if len_after &lt;= len_before:\n            raise ScriptingBridgeError(\n                f\"Could not create note '{name}' with body '{body}'\"\n            )\n\n        new_note = Note(note)\n        if attachments:\n            for attachment in attachments:\n                if not os.path.exists(attachment):\n                    raise FileNotFoundError(f\"File {attachment} does not exist\")\n                new_note.add_attachment(attachment)\n        return new_note\n\n    def _noteslist(\n        self,\n        name: list[str] | None = None,\n        body: list[str] | None = None,\n        text: list[str] | None = None,\n        password_protected: bool | None = None,\n        id: list[str] | None = None,\n    ) -&gt; ScriptingBridge.SBElementArray:\n        \"\"\"Return SBElementArray for all notes contained in account or notes filtered by property\"\"\"\n        notes = self._account.notes()\n        format_strings = []\n        if name and notes:\n            name_strings = [\"(name contains[cd] %@)\"] * len(name)\n            format_strings.append(name_strings)\n        if body and notes:\n            body_strings = [\"(plaintext contains[cd] %@)\"] * len(body)\n            format_strings.append(body_strings)\n        if text and notes:\n            text_strings = [\"(name contains[cd] %@)\"] * len(text)\n            text_strings.extend([\"(plaintext contains[cd] %@)\"] * len(text))\n            format_strings.append(text_strings)\n        if password_protected is not None and notes:\n            password_string = (\n                [\"(passwordProtected == TRUE)\"]\n                if password_protected\n                else [\"(passwordProtected == FALSE)\"]\n            )\n            format_strings.append(password_string)\n        if id and notes:\n            id_string = [\"(id == %@)\"] * len(id)\n            format_strings.append(id_string)\n        if format_strings:\n            # have one or more search predicates; filter notes\n            args = name or []\n            args += body or []\n            if text:\n                args += text * 2\n            args += id or []\n            or_strings = [\" OR \".join(strings) for strings in format_strings]\n            format_str = \"(\" + \") AND (\".join(or_strings) + \")\"\n            predicate = AppKit.NSPredicate.predicateWithFormat_(format_str, *args)\n            notes = notes.filteredArrayUsingPredicate_(predicate)\n        return notes\n\n    def _folder_for_name(self, folder: str) -&gt; ScriptingBridge.SBObject:\n        \"\"\"Return ScriptingBridge folder object for folder\"\"\"\n        if folder_objs := self._account.folders().filteredArrayUsingPredicate_(\n            AppKit.NSPredicate.predicateWithFormat_(\"name == %@\", folder)\n        ):\n            return folder_objs[0]\n        else:\n            raise ValueError(f\"Could not find folder {folder}\")\n\n    def _run_script(self, script, *args):\n        return run_script(script, self.name, *args)\n\n    def __len__(self) -&gt; int:\n        \"\"\"Return count of notes\"\"\"\n        return len(self._account.notes())\n        # return self._run_script(\"accountGetCount\")\n\n    def __iter__(self) -&gt; Generator[Note, None, None]:\n        \"\"\"Generator to yield all notes contained in Notes.app\"\"\"\n        for note in self._account.notes():\n            yield Note(note)\n</code></pre>"},{"location":"reference/#macnotesapp.notesapp.Account.default_folder","title":"<code>default_folder: str</code>  <code>property</code>","text":"<p>Return name of default folder for account</p>"},{"location":"reference/#macnotesapp.notesapp.Account.folders","title":"<code>folders: list[str]</code>  <code>property</code>","text":"<p>Return list of folder names in account</p>"},{"location":"reference/#macnotesapp.notesapp.Account.id","title":"<code>id: str</code>  <code>cached</code> <code>property</code>","text":"<p>Return ID of account</p>"},{"location":"reference/#macnotesapp.notesapp.Account.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Return name of account</p>"},{"location":"reference/#macnotesapp.notesapp.Account.__init__","title":"<code>__init__(account)</code>","text":"<p>Initialize Account object</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>def __init__(self, account: ScriptingBridge.SBObject):\n    \"\"\"Initialize Account object\"\"\"\n    self._account = account\n</code></pre>"},{"location":"reference/#macnotesapp.notesapp.Account.__iter__","title":"<code>__iter__()</code>","text":"<p>Generator to yield all notes contained in Notes.app</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>def __iter__(self) -&gt; Generator[Note, None, None]:\n    \"\"\"Generator to yield all notes contained in Notes.app\"\"\"\n    for note in self._account.notes():\n        yield Note(note)\n</code></pre>"},{"location":"reference/#macnotesapp.notesapp.Account.__len__","title":"<code>__len__()</code>","text":"<p>Return count of notes</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>def __len__(self) -&gt; int:\n    \"\"\"Return count of notes\"\"\"\n    return len(self._account.notes())\n</code></pre>"},{"location":"reference/#macnotesapp.notesapp.Account.folder","title":"<code>folder(folder)</code>","text":"<p>Return Folder object for folder with name folder.</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>def folder(self, folder: str) -&gt; \"Folder\":\n    \"\"\"Return Folder object for folder with name folder.\"\"\"\n    folder_obj = self._folder_for_name(folder)\n    return Folder(folder_obj)\n</code></pre>"},{"location":"reference/#macnotesapp.notesapp.Account.make_note","title":"<code>make_note(name, body, folder=None, attachments=None)</code>","text":"<p>Create new note in account</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of note</p> required <code>body</code> <code>str</code> <p>body of note</p> required <code>folder</code> <code>str | None</code> <p>optional folder to create note in; if None, uses default folder</p> <code>None</code> <code>attachments</code> <code>list[str] | None</code> <p>optional list of file paths to attach to note</p> <code>None</code> <p>Returns:</p> Type Description <code>'Note'</code> <p>Note object for new note</p> <p>Raises:</p> Type Description <code>ScriptingBridgeError</code> <p>if note could not be created</p> <code>FileNotFoundError</code> <p>if attachment file could not be found</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>def make_note(\n    self,\n    name: str,\n    body: str,\n    folder: str | None = None,\n    attachments: list[str] | None = None,\n) -&gt; \"Note\":\n    \"\"\"Create new note in account\n\n    Args:\n        name: name of note\n        body: body of note\n        folder: optional folder to create note in; if None, uses default folder\n        attachments: optional list of file paths to attach to note\n\n    Returns:\n        Note object for new note\n\n    Raises:\n        ScriptingBridgeError: if note could not be created\n        FileNotFoundError: if attachment file could not be found\n    \"\"\"\n\n    # reference: https://developer.apple.com/documentation/scriptingbridge/sbobject/1423973-initwithproperties\n    notes_app = NotesApp()\n    folder_obj = (\n        self._folder_for_name(folder) if folder else self._account.defaultFolder()\n    )\n    properties = {\n        \"body\": f\"&lt;div&gt;&lt;h1&gt;{name}&lt;/h1&gt;&lt;/div&gt;\\n{body}\",\n    }\n    note = (\n        notes_app.app.classForScriptingClass_(\"note\")\n        .alloc()\n        .initWithProperties_(properties)\n    )\n    notes = folder_obj.notes()\n    len_before = len(notes)\n    notes.addObject_(note)\n    len_after = len(notes)\n\n    if len_after &lt;= len_before:\n        raise ScriptingBridgeError(\n            f\"Could not create note '{name}' with body '{body}'\"\n        )\n\n    new_note = Note(note)\n    if attachments:\n        for attachment in attachments:\n            if not os.path.exists(attachment):\n                raise FileNotFoundError(f\"File {attachment} does not exist\")\n            new_note.add_attachment(attachment)\n    return new_note\n</code></pre>"},{"location":"reference/#macnotesapp.notesapp.Account.notes","title":"<code>notes(name=None, body=None, text=None, password_protected=None, id=None)</code>","text":"<p>Return Note object for all notes contained in account or notes filtered by property.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>list[str] | None</code> <p>list of note names to filter by</p> <code>None</code> <code>body</code> <code>list[str] | None</code> <p>list of note bodies to filter by</p> <code>None</code> <code>text</code> <code>list[str] | None</code> <p>list of note text to filter by</p> <code>None</code> <code>password_protected</code> <code>bool | None</code> <p>filter by password protected notes</p> <code>None</code> <code>id</code> <code>list[str] | None</code> <p>list of note ids to filter by</p> <code>None</code> <p>Returns:</p> Type Description <code>list['Note']</code> <p>list of Note objects</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>def notes(\n    self,\n    name: list[str] | None = None,\n    body: list[str] | None = None,\n    text: list[str] | None = None,\n    password_protected: bool | None = None,\n    id: list[str] | None = None,\n) -&gt; list[\"Note\"]:\n    \"\"\"Return Note object for all notes contained in account or notes filtered by property.\n\n    Args:\n        name: list of note names to filter by\n        body: list of note bodies to filter by\n        text: list of note text to filter by\n        password_protected: filter by password protected notes\n        id: list of note ids to filter by\n\n    Returns:\n        list of Note objects\n    \"\"\"\n    # TODO: should this be a generator?\n    notes = self._account.notes()\n    format_strings = []\n    if name and notes:\n        name_strings = [\"(name contains[cd] %@)\"] * len(name)\n        format_strings.append(name_strings)\n    if body and notes:\n        body_strings = [\"(plaintext contains[cd] %@)\"] * len(body)\n        format_strings.append(body_strings)\n    if text and notes:\n        text_strings = [\"(name contains[cd] %@)\"] * len(text)\n        text_strings.extend([\"(plaintext contains[cd] %@)\"] * len(text))\n        format_strings.append(text_strings)\n    if password_protected is not None and notes:\n        password_string = (\n            [\"(passwordProtected == TRUE)\"]\n            if password_protected\n            else [\"(passwordProtected == FALSE)\"]\n        )\n        format_strings.append(password_string)\n    if id and notes:\n        id_string = [\"(id == %@)\"] * len(id)\n        format_strings.append(id_string)\n    if format_strings:\n        # have one or more search predicates; filter notes\n        args = name or []\n        args += body or []\n        if text:\n            args += text * 2\n        args += id or []\n        or_strings = [\" OR \".join(strings) for strings in format_strings]\n        format_str = \"(\" + \") AND (\".join(or_strings) + \")\"\n        predicate = AppKit.NSPredicate.predicateWithFormat_(format_str, *args)\n        notes = notes.filteredArrayUsingPredicate_(predicate)\n    return [Note(note) for note in notes.get()]\n</code></pre>"},{"location":"reference/#macnotesapp.notesapp.Account.noteslist","title":"<code>noteslist(name=None, body=None, text=None, password_protected=None, id=None)</code>","text":"<p>Return NoteList object for all notes contained in account or notes filtered by property.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>list[str] | None</code> <p>list of note names to filter by</p> <code>None</code> <code>body</code> <code>list[str] | None</code> <p>list of note bodies to filter by</p> <code>None</code> <code>text</code> <code>list[str] | None</code> <p>list of note text to filter by</p> <code>None</code> <code>password_protected</code> <code>bool | None</code> <p>filter by password protected notes</p> <code>None</code> <code>id</code> <code>list[str] | None</code> <p>list of note ids to filter by</p> <code>None</code> <p>Returns:</p> Type Description <code>'NotesList'</code> <p>NotesList object</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>def noteslist(\n    self,\n    name: list[str] | None = None,\n    body: list[str] | None = None,\n    text: list[str] | None = None,\n    password_protected: bool | None = None,\n    id: list[str] | None = None,\n) -&gt; \"NotesList\":\n    \"\"\"Return NoteList object for all notes contained in account or notes filtered by property.\n\n    Args:\n        name: list of note names to filter by\n        body: list of note bodies to filter by\n        text: list of note text to filter by\n        password_protected: filter by password protected notes\n        id: list of note ids to filter by\n\n    Returns:\n        NotesList object\"\"\"\n    notes = self._noteslist(name, body, text, password_protected, id)\n    return NotesList(notes)\n</code></pre>"},{"location":"reference/#macnotesapp.notesapp.Account.show","title":"<code>show()</code>","text":"<p>Show account in Notes.app UI</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>def show(self):\n    \"\"\"Show account in Notes.app UI\"\"\"\n    self._run_script(\"accountShow\")\n</code></pre>"},{"location":"reference/#folder","title":"Folder","text":"<p>Folder object</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>class Folder:\n    \"\"\"Folder object\"\"\"\n\n    def __init__(self, folder: ScriptingBridge.SBObject):\n        self._folder = folder\n\n    @cached_property\n    def id(self) -&gt; str:\n        \"\"\"ID of folder\"\"\"\n        return (\n            str(folder_id)\n            if (folder_id := self._folder.id())\n            else str(parse_id_from_object(self._folder.get()))\n        )\n\n    @property\n    def name(self) -&gt; str:\n        \"\"\"Name of folder\"\"\"\n        return str(self._folder.name())\n</code></pre>"},{"location":"reference/#macnotesapp.notesapp.Folder.id","title":"<code>id: str</code>  <code>cached</code> <code>property</code>","text":"<p>ID of folder</p>"},{"location":"reference/#macnotesapp.notesapp.Folder.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Name of folder</p>"},{"location":"reference/#note","title":"Note","text":"<p>Note object representing a note in Notes.app</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>class Note:\n    \"\"\"Note object representing a note in Notes.app\"\"\"\n\n    def __init__(self, note: ScriptingBridge.SBObject):\n        self._note = note\n\n    @property\n    def account(self) -&gt; str:\n        \"\"\"Return name of account note belongs to.\"\"\"\n        # can't determine this easily from the note object\n        # so may to use AppleScript\n        return str(run_script(\"noteGetAccount\", self.id))\n\n    @cached_property\n    def id(self) -&gt; str:\n        \"\"\"Return note ID\"\"\"\n        if note_id := self._note.id():\n            return str(note_id)\n        else:\n            # if note object created from selection or predicate it may show ID of 0\n            # but the ID is in the string representation of the object so parse it\n            return parse_id_from_object(self._note) or 0\n\n    @property\n    def name(self) -&gt; str:\n        \"\"\"Return name of note\"\"\"\n        return (\n            str(name)\n            if (name := self._note.name())\n            else self._run_script(\"noteGetName\")\n        )\n\n    @name.setter\n    def name(self, name: str):\n        \"\"\"Set name of note\"\"\"\n        self._note.setValue_forKey_(name, \"name\")\n        if self.name != name:\n            self._run_script(\"noteSetName\", name)\n\n    @property\n    def body(self) -&gt; str:\n        \"\"\"Return body of note\"\"\"\n        return (\n            str(body)\n            if (body := self._note.body())\n            else str(self._run_script(\"noteGetBody\"))\n        )\n\n    @body.setter\n    def body(self, body: str):\n        \"\"\"Set body of note\"\"\"\n        self._note.setValue_forKey_(body, \"body\")\n        if self.body != body:\n            self._run_script(\"noteSetBody\", body)\n\n    @property\n    def plaintext(self) -&gt; str:\n        \"\"\"Return plaintext of note\"\"\"\n        return (\n            str(plaintext)\n            if (plaintext := self._note.plaintext())\n            else str(self._run_script(\"noteGetPlainText\"))\n        )\n\n    @property\n    def creation_date(self) -&gt; datetime:\n        \"\"\"Return creation date of note as datetime\"\"\"\n        if date := self._note.creationDate():\n            return NSDate_to_datetime(date)\n        else:\n            return self._run_script(\"noteGetCreationDate\")\n\n    @property\n    def modification_date(self) -&gt; datetime:\n        \"\"\"Return modification date of note as datetime\"\"\"\n        if date := self._note.modificationDate():\n            return NSDate_to_datetime(date)\n        else:\n            return self._run_script(\"noteGetModificationDate\")\n\n    @property\n    def password_protected(self) -&gt; bool:\n        \"\"\"Return password protected status of note\"\"\"\n        # return self._note.passwordProtected() # returns False even when note is password protected on some OS versions\n        if MAC_OS_VERSION &gt;= 13:\n            return bool(self._note.passwordProtected())\n        return bool(self._run_script(\"noteGetPasswordProtected\"))\n\n    @property\n    def folder(self) -&gt; str:\n        \"\"\"Return name of folder note is contained in\"\"\"\n        # calling container() method on note object returns None\n        # in many cases, so use AppleScript instead\n        return self._note.container().name() or self._run_script(\"noteGetContainer\")\n\n    @property\n    def attachments(self) -&gt; list[\"Attachment\"]:\n        \"\"\"Return list of attachments for note as Attachment objects\"\"\"\n\n        # .attachments() method on note object sometimes returns duplicates, e.g each attachment is returned twice\n        # filter out duplicates by comparing attachment ID\n        # this appears to happen only with attachments added via AppleScript or ScriptingBridge\n        # not with those natively added in Notes.app\n        attachments = [\n            Attachment(attachment) for attachment in self._note.attachments()\n        ]\n        return [\n            attachment\n            for i, attachment in enumerate(attachments)\n            if attachment.id not in [a.id for a in attachments[:i]]\n        ]\n\n    def add_attachment(self, path: str) -&gt; \"Attachment\":\n        \"\"\"Add attachment to note\n\n        Args:\n            path: path to file to attach\n\n        Returns:\n            Attachment object for attached file\n\n        Raises:\n            FileNotFoundError: if file not found\n        \"\"\"\n\n        # Implementation note:\n        # this is currently done with AppleScript which takes ~300ms on M1 Mac\n        # it's faster with ScriptingBridge (~80ms) but when adding via ScriptingBridge\n        # the attachment sometimes is added twice\n        # See #15 for more details\n\n        # must pass fully resolved path to AppleScript\n        path = pathlib.Path(path).expanduser().resolve()\n        if not path.exists():\n            raise FileNotFoundError(f\"File not found: {path}\")\n        attachment_id = self._run_script(\"noteAddAttachment\", str(path))\n        return Attachment(self._note.attachments().objectWithID_(attachment_id))\n\n    def show(self):\n        \"\"\"Show note in Notes.app UI\"\"\"\n        self._run_script(\"noteShow\")\n\n    def asdict(self) -&gt; dict[str, Any]:\n        \"\"\"Return dict representation of note\"\"\"\n        return {\n            \"account\": self.account,\n            \"id\": self.id,\n            \"name\": self.name,\n            \"body\": self.body,\n            \"plaintext\": self.plaintext,\n            \"creation_date\": self.creation_date,\n            \"modification_date\": self.modification_date,\n            \"password_protected\": self.password_protected,\n            \"folder\": self.folder,\n        }\n\n    def _run_script(self, script: str, *args):\n        \"\"\"Run AppleScript script\"\"\"\n        return run_script(script, self.account, self.id, *args)\n\n    def _parse_id_from_object(self) -&gt; str:\n        \"\"\"Parse the ID from the object representation when it can't be determined by ScriptingBridge\"\"\"\n\n        # there are some conditions (e.g. using selection on Catalina or using a predicate)\n        # where the ScriptingBridge sets the object ID to 0\n        # I haven't been able to figure out why but in this case, the id can be determined\n        # by examining the string representation of the object which looks like this:\n        # &lt;SBObject @0x7fd721544690: &lt;class ''&gt; id \"x-coredata://19B82A76-B3FE-4427-9C5E-5107C1E3CA57/IMAPNote/p87\" of application \"Notes\" (55036)&gt;\n        if match := re.search(r'id \"(x-coredata://.+?)\"', str(self._note)):\n            return match[1]\n        return None\n\n    def __repr__(self) -&gt; str:\n        return f\"Note({self.id})\"\n\n    def __eq__(self, other: \"Note\"):\n        return (self.id, self.account) == (other.id, other.account)\n\n    def __hash__(self) -&gt; int:\n        return hash(repr(self))\n</code></pre>"},{"location":"reference/#macnotesapp.notesapp.Note.account","title":"<code>account: str</code>  <code>property</code>","text":"<p>Return name of account note belongs to.</p>"},{"location":"reference/#macnotesapp.notesapp.Note.attachments","title":"<code>attachments: list['Attachment']</code>  <code>property</code>","text":"<p>Return list of attachments for note as Attachment objects</p>"},{"location":"reference/#macnotesapp.notesapp.Note.body","title":"<code>body: str</code>  <code>property</code> <code>writable</code>","text":"<p>Return body of note</p>"},{"location":"reference/#macnotesapp.notesapp.Note.creation_date","title":"<code>creation_date: datetime</code>  <code>property</code>","text":"<p>Return creation date of note as datetime</p>"},{"location":"reference/#macnotesapp.notesapp.Note.folder","title":"<code>folder: str</code>  <code>property</code>","text":"<p>Return name of folder note is contained in</p>"},{"location":"reference/#macnotesapp.notesapp.Note.id","title":"<code>id: str</code>  <code>cached</code> <code>property</code>","text":"<p>Return note ID</p>"},{"location":"reference/#macnotesapp.notesapp.Note.modification_date","title":"<code>modification_date: datetime</code>  <code>property</code>","text":"<p>Return modification date of note as datetime</p>"},{"location":"reference/#macnotesapp.notesapp.Note.name","title":"<code>name: str</code>  <code>property</code> <code>writable</code>","text":"<p>Return name of note</p>"},{"location":"reference/#macnotesapp.notesapp.Note.password_protected","title":"<code>password_protected: bool</code>  <code>property</code>","text":"<p>Return password protected status of note</p>"},{"location":"reference/#macnotesapp.notesapp.Note.plaintext","title":"<code>plaintext: str</code>  <code>property</code>","text":"<p>Return plaintext of note</p>"},{"location":"reference/#macnotesapp.notesapp.Note.add_attachment","title":"<code>add_attachment(path)</code>","text":"<p>Add attachment to note</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>path to file to attach</p> required <p>Returns:</p> Type Description <code>'Attachment'</code> <p>Attachment object for attached file</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>if file not found</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>def add_attachment(self, path: str) -&gt; \"Attachment\":\n    \"\"\"Add attachment to note\n\n    Args:\n        path: path to file to attach\n\n    Returns:\n        Attachment object for attached file\n\n    Raises:\n        FileNotFoundError: if file not found\n    \"\"\"\n\n    # Implementation note:\n    # this is currently done with AppleScript which takes ~300ms on M1 Mac\n    # it's faster with ScriptingBridge (~80ms) but when adding via ScriptingBridge\n    # the attachment sometimes is added twice\n    # See #15 for more details\n\n    # must pass fully resolved path to AppleScript\n    path = pathlib.Path(path).expanduser().resolve()\n    if not path.exists():\n        raise FileNotFoundError(f\"File not found: {path}\")\n    attachment_id = self._run_script(\"noteAddAttachment\", str(path))\n    return Attachment(self._note.attachments().objectWithID_(attachment_id))\n</code></pre>"},{"location":"reference/#macnotesapp.notesapp.Note.asdict","title":"<code>asdict()</code>","text":"<p>Return dict representation of note</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>def asdict(self) -&gt; dict[str, Any]:\n    \"\"\"Return dict representation of note\"\"\"\n    return {\n        \"account\": self.account,\n        \"id\": self.id,\n        \"name\": self.name,\n        \"body\": self.body,\n        \"plaintext\": self.plaintext,\n        \"creation_date\": self.creation_date,\n        \"modification_date\": self.modification_date,\n        \"password_protected\": self.password_protected,\n        \"folder\": self.folder,\n    }\n</code></pre>"},{"location":"reference/#macnotesapp.notesapp.Note.show","title":"<code>show()</code>","text":"<p>Show note in Notes.app UI</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>def show(self):\n    \"\"\"Show note in Notes.app UI\"\"\"\n    self._run_script(\"noteShow\")\n</code></pre>"},{"location":"reference/#noteslist","title":"NotesList","text":"<p>NotesList object for list of notes. Represents an SBElementArray of notes as returned by noteslist()</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>class NotesList:\n    \"\"\"NotesList object for list of notes.\n    Represents an SBElementArray of notes as returned by noteslist()\n    \"\"\"\n\n    def __init__(self, *noteslist: ScriptingBridge.SBElementArray):\n        self._noteslist = noteslist\n\n    @property\n    def id(self) -&gt; list[str]:\n        \"\"\"Return ID of every note in list as list of strings\"\"\"\n        return self._apply_selector(\"id\")\n\n    @property\n    def name(self) -&gt; list[str]:\n        \"\"\"Return name of every note in list as list of strings\"\"\"\n        return self._apply_selector(\"name\")\n\n    @property\n    def body(self) -&gt; list[str]:\n        \"\"\"Return body of every note in list as list of strings\"\"\"\n        return self._apply_selector(\"body\")\n\n    @property\n    def plaintext(self) -&gt; list[str]:\n        \"\"\"Return plaintext of every note in list as list of strings\"\"\"\n        return self._apply_selector(\"plaintext\")\n\n    @property\n    def container(self) -&gt; list[str]:\n        \"\"\"Return container of every note in list as list of strings\"\"\"\n        return self._apply_selector(\"container\")\n\n    @property\n    def folder(self) -&gt; list[str]:\n        \"\"\"Return folder of every note in list as list of strings\"\"\"\n        return self.container\n\n    @property\n    def creation_date(self) -&gt; list[datetime]:\n        \"\"\"Return creation date of every note in list as list of datetimes\"\"\"\n        return self._apply_selector(\"creationDate\")\n\n    @property\n    def modification_date(self) -&gt; list[datetime]:\n        \"\"\"Return modification date of every note in list as list of datetimes\"\"\"\n        return self._apply_selector(\"modificationDate\")\n\n    @property\n    def password_protected(self) -&gt; list[bool]:\n        \"\"\"Return whether every note in list is password protected as list of bools\"\"\"\n        return self._apply_selector(\"passwordProtected\")\n\n    def asdict(self) -&gt; list[dict[str, str]]:\n        \"\"\"Return list of dict representations of note\"\"\"\n        return [\n            {\n                \"id\": note[0],\n                \"name\": note[1],\n                \"body\": note[2],\n                \"plaintext\": note[3],\n                \"creation_date\": note[4],\n                \"modification_date\": note[5],\n                \"password_protected\": note[6],\n                \"folder\": note[7],\n            }\n            for note in zip(\n                self.id,\n                self.name,\n                self.body,\n                self.plaintext,\n                self.creation_date,\n                self.modification_date,\n                self.password_protected,\n                self.container,\n            )\n        ]\n\n    def _apply_selector(self, selector) -&gt; list[str]:\n        \"\"\"Return note properties in list that pass selector\"\"\"\n        results_list = []\n        for noteslist in self._noteslist:\n            results = noteslist.arrayByApplyingSelector_(selector)\n            if selector in [\"creationDate\", \"modificationDate\"]:\n                results_list.extend(NSDate_to_datetime(date) for date in results)\n            elif selector == \"container\":\n                results_list.extend(str(container.name()) for container in results)\n            else:\n                results_list.extend([str(r) for r in results])\n        return results_list\n\n    def __len__(self) -&gt; int:\n        \"\"\"Return count of notes in list\"\"\"\n        return len(self.id)\n</code></pre>"},{"location":"reference/#macnotesapp.notesapp.NotesList.body","title":"<code>body: list[str]</code>  <code>property</code>","text":"<p>Return body of every note in list as list of strings</p>"},{"location":"reference/#macnotesapp.notesapp.NotesList.container","title":"<code>container: list[str]</code>  <code>property</code>","text":"<p>Return container of every note in list as list of strings</p>"},{"location":"reference/#macnotesapp.notesapp.NotesList.creation_date","title":"<code>creation_date: list[datetime]</code>  <code>property</code>","text":"<p>Return creation date of every note in list as list of datetimes</p>"},{"location":"reference/#macnotesapp.notesapp.NotesList.folder","title":"<code>folder: list[str]</code>  <code>property</code>","text":"<p>Return folder of every note in list as list of strings</p>"},{"location":"reference/#macnotesapp.notesapp.NotesList.id","title":"<code>id: list[str]</code>  <code>property</code>","text":"<p>Return ID of every note in list as list of strings</p>"},{"location":"reference/#macnotesapp.notesapp.NotesList.modification_date","title":"<code>modification_date: list[datetime]</code>  <code>property</code>","text":"<p>Return modification date of every note in list as list of datetimes</p>"},{"location":"reference/#macnotesapp.notesapp.NotesList.name","title":"<code>name: list[str]</code>  <code>property</code>","text":"<p>Return name of every note in list as list of strings</p>"},{"location":"reference/#macnotesapp.notesapp.NotesList.password_protected","title":"<code>password_protected: list[bool]</code>  <code>property</code>","text":"<p>Return whether every note in list is password protected as list of bools</p>"},{"location":"reference/#macnotesapp.notesapp.NotesList.plaintext","title":"<code>plaintext: list[str]</code>  <code>property</code>","text":"<p>Return plaintext of every note in list as list of strings</p>"},{"location":"reference/#macnotesapp.notesapp.NotesList.__len__","title":"<code>__len__()</code>","text":"<p>Return count of notes in list</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>def __len__(self) -&gt; int:\n    \"\"\"Return count of notes in list\"\"\"\n    return len(self.id)\n</code></pre>"},{"location":"reference/#macnotesapp.notesapp.NotesList.asdict","title":"<code>asdict()</code>","text":"<p>Return list of dict representations of note</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>def asdict(self) -&gt; list[dict[str, str]]:\n    \"\"\"Return list of dict representations of note\"\"\"\n    return [\n        {\n            \"id\": note[0],\n            \"name\": note[1],\n            \"body\": note[2],\n            \"plaintext\": note[3],\n            \"creation_date\": note[4],\n            \"modification_date\": note[5],\n            \"password_protected\": note[6],\n            \"folder\": note[7],\n        }\n        for note in zip(\n            self.id,\n            self.name,\n            self.body,\n            self.plaintext,\n            self.creation_date,\n            self.modification_date,\n            self.password_protected,\n            self.container,\n        )\n    ]\n</code></pre>"},{"location":"reference/#attachment","title":"Attachment","text":"<p>Notes.app Attachment object</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>class Attachment:\n    \"\"\"Notes.app Attachment object\"\"\"\n\n    def __init__(self, attachment: ScriptingBridge.SBObject):\n        self._attachment = attachment\n\n    @cached_property\n    def id(self) -&gt; str:\n        \"\"\"ID of attachment\"\"\"\n        return str(self._attachment.id())\n\n    @property\n    def name(self) -&gt; str:\n        \"\"\"Name of attachment\"\"\"\n        return str(name) if (name := self._attachment.name()) else None\n\n    @property\n    def creation_date(self) -&gt; datetime:\n        \"\"\"Creation date of attachment\"\"\"\n        return NSDate_to_datetime(self._attachment.creationDate())\n\n    @property\n    def modification_date(self) -&gt; datetime:\n        \"\"\"Modification date of attachment\"\"\"\n        return NSDate_to_datetime(self._attachment.modificationDate())\n\n    @property\n    def content_identifier(self) -&gt; str:\n        \"\"\"The content-id URL in the note's HTML\"\"\"\n        return str(ci) if (ci := self._attachment.contentIdentifier()) else None\n\n    @property\n    def URL(self) -&gt; str:\n        \"\"\"For URL attachments, the URL the attachment represents\"\"\"\n        return str(url) if (url := self._attachment.URL()) else None\n\n    def save(self, path: str | bytes | os.PathLike) -&gt; str:\n        \"\"\"Save attachment to file\"\"\"\n        if not os.path.exists(str(path)):\n            raise FileNotFoundError(f\"Path does not exist: {path}\")\n\n        url = AppKit.NSURL.alloc().initFileURLWithPath_(\n            os.path.join(str(path), self.name)\n        )\n        self._attachment.saveIn_as_(url, OSType(\"item\"))\n        return str(url.path())\n</code></pre>"},{"location":"reference/#macnotesapp.notesapp.Attachment.URL","title":"<code>URL: str</code>  <code>property</code>","text":"<p>For URL attachments, the URL the attachment represents</p>"},{"location":"reference/#macnotesapp.notesapp.Attachment.content_identifier","title":"<code>content_identifier: str</code>  <code>property</code>","text":"<p>The content-id URL in the note's HTML</p>"},{"location":"reference/#macnotesapp.notesapp.Attachment.creation_date","title":"<code>creation_date: datetime</code>  <code>property</code>","text":"<p>Creation date of attachment</p>"},{"location":"reference/#macnotesapp.notesapp.Attachment.id","title":"<code>id: str</code>  <code>cached</code> <code>property</code>","text":"<p>ID of attachment</p>"},{"location":"reference/#macnotesapp.notesapp.Attachment.modification_date","title":"<code>modification_date: datetime</code>  <code>property</code>","text":"<p>Modification date of attachment</p>"},{"location":"reference/#macnotesapp.notesapp.Attachment.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Name of attachment</p>"},{"location":"reference/#macnotesapp.notesapp.Attachment.save","title":"<code>save(path)</code>","text":"<p>Save attachment to file</p> Source code in <code>macnotesapp/notesapp.py</code> <pre><code>def save(self, path: str | bytes | os.PathLike) -&gt; str:\n    \"\"\"Save attachment to file\"\"\"\n    if not os.path.exists(str(path)):\n        raise FileNotFoundError(f\"Path does not exist: {path}\")\n\n    url = AppKit.NSURL.alloc().initFileURLWithPath_(\n        os.path.join(str(path), self.name)\n    )\n    self._attachment.saveIn_as_(url, OSType(\"item\"))\n    return str(url.path())\n</code></pre>"}]}